import type { Message } from "ai";
import {
  streamText,
  createDataStreamResponse,
  appendResponseMessages,
} from "ai";
import { z } from "zod";
import { model } from "~/model";
import { auth } from "~/server/auth";
import { searchSerper } from "~/serper";
import { checkRateLimit, recordRequest } from "~/server/rate-limiter";
import { upsertChat } from "~/server/db/chat-helpers";

export const maxDuration = 60;

export async function POST(request: Request) {
  const session = await auth();
  
  if (!session?.user?.id) {
    return new Response("Unauthorized", { status: 401 });
  }

  const body = (await request.json()) as {
    messages: Array<Message>;
    chatId: string;
    isNewChat: boolean;
  };

  // Check rate limit
  let rateLimitStatus;
  try {
    rateLimitStatus = await checkRateLimit(session.user.id);

    if (!rateLimitStatus.allowed) {
      return new Response(
        JSON.stringify({
          error: "Too Many Requests",
          message: "Daily limit exceeded",
          limit: rateLimitStatus.limit,
          remaining: 0,
        }),
        { 
          status: 429,
          headers: {
            'Content-Type': 'application/json',
            'X-RateLimit-Limit': rateLimitStatus.limit.toString(),
            'X-RateLimit-Remaining': '0',
          }
        }
      );
    }

    // Record the request
    await recordRequest(session.user.id);
  } catch (error) {
    console.error("Rate limit check failed:", error);
    return new Response("Internal Server Error", { status: 500 });
  }

  return createDataStreamResponse({
    execute: async (dataStream) => {
      const { messages, chatId, isNewChat } = body;
      
      // Get the title from the first user message
      const firstUserMessage = messages.find(m => m.role === 'user');
      const title = firstUserMessage?.content?.toString().slice(0, 100) ?? 'New Chat';
      
      // Save the initial state of the chat (with user's message)
      await upsertChat({
        userId: session.user.id,
        chatId: chatId,
        title,
        messages,
      });

      // Send NEW_CHAT_CREATED event if this is a new chat
      if (isNewChat) {
        dataStream.writeData({
          type: "NEW_CHAT_CREATED",
          chatId: chatId,
        });
      }

      const result = streamText({
        model,
        messages,
        system: `You are a helpful AI assistant with access to web search capabilities. 
When a user asks you a question, you should always use the searchWeb tool to find the most up-to-date and accurate information.
Always cite your sources with inline links when providing information from search results.
Format your responses in a clear and helpful manner, including relevant links from the search results.`,
        maxSteps: 10,
        tools: {
          searchWeb: {
            parameters: z.object({
              query: z.string().describe("The query to search the web for"),
            }),
            execute: async ({ query }, { abortSignal }) => {
              const results = await searchSerper(
                { q: query, num: 10 },
                abortSignal,
              );

              return results.organic.map((result: any) => ({
                title: result.title,
                link: result.link,
                snippet: result.snippet,
              }));
            },
          },
        },
        onFinish: async ({ response }) => {
          // Get the response messages generated by the AI
          const responseMessages = response.messages;
          
          // Merge the original messages with the AI's response messages
          const updatedMessages = appendResponseMessages({
            messages,
            responseMessages,
          });
          
          // Save the complete chat with all messages to the database
          await upsertChat({
            userId: session.user.id,
            chatId: chatId,
            title,
            messages: updatedMessages,
          });
        },
      });

      result.mergeIntoDataStream(dataStream);
    },
    onError: (e) => {
      console.error(e);
      return "Oops, an error occured!";
    },
  });
}