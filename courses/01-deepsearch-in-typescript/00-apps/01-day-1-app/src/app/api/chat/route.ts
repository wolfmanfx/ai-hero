import type { Message } from "ai";
import {
  createDataStreamResponse,
  appendResponseMessages,
} from "ai";
import { auth } from "~/server/auth";
import { checkRateLimit, recordRateLimit, type RateLimitConfig } from "~/server/redis/rate-limiter";
import { upsertChat } from "~/server/db/chat-helpers";
import { Langfuse } from "langfuse";
import { env } from "~/env";
import { streamFromDeepSearch } from "~/deep-search";

export const maxDuration = 60;

const langfuse = new Langfuse({
  environment: env.NODE_ENV,
});

export async function POST(request: Request) {
  const session = await auth();
  
  if (!session?.user?.id) {
    return new Response("Unauthorized", { status: 401 });
  }

  const body = (await request.json()) as {
    messages: Array<Message>;
    chatId: string;
    isNewChat: boolean;
  };

  // Create Langfuse trace early, will update sessionId later
  const trace = langfuse.trace({
    name: "chat",
    userId: session.user.id,
  });

  // Check rate limit
  const config: RateLimitConfig = {
    maxRequests: 10,
    maxRetries: 3,
    windowMs: 5_000, // 20 seconds for testing
    keyPrefix: "global",
  };

  try {
    const rateLimitSpan = trace.span({
      name: "check-rate-limit",
      input: {
        userId: session.user.id,
      },
    });

    const rateLimitCheck = await checkRateLimit(config);

    rateLimitSpan.end({
      output: {
        allowed: rateLimitCheck.allowed,
        remaining: rateLimitCheck.remaining,
        totalHits: rateLimitCheck.totalHits,
        resetTime: rateLimitCheck.resetTime,
      },
    });

    if (!rateLimitCheck.allowed) {
      console.log("Rate limit exceeded, waiting...");
      const waitSpan = trace.span({
        name: "rate-limit-wait",
        input: {
          userId: session.user.id,
        },
      });

      const isAllowed = await rateLimitCheck.retry();
      
      waitSpan.end({
        output: {
          allowed: isAllowed,
        },
      });

      // If the rate limit is still exceeded after retries, return a 429
      if (!isAllowed) {
        return new Response("Rate limit exceeded", {
          status: 429,
        });
      }
    }

    // Record the request
    const recordRequestSpan = trace.span({
      name: "record-request",
      input: {
        userId: session.user.id,
      },
    });

    await recordRateLimit(config);

    recordRequestSpan.end({
      output: {
        success: true,
      },
    });
  } catch (error) {
    console.error("Rate limit check failed:", error);
    return new Response("Internal Server Error", { status: 500 });
  }

  return createDataStreamResponse({
    execute: async (dataStream) => {
      const { messages, chatId, isNewChat } = body;
      
      // Update trace with sessionId now that we have chatId
      trace.update({
        sessionId: chatId,
      });
      
      // Get the title from the first user message
      const firstUserMessage = messages.find(m => m.role === 'user');
      const title = firstUserMessage?.content?.toString().slice(0, 100) ?? 'New Chat';
      
      // Save the initial state of the chat (with user's message)
      const upsertChatSpan = trace.span({
        name: "upsert-chat-initial",
        input: {
          userId: session.user.id,
          chatId: chatId,
          title: title,
          messageCount: messages.length,
          isNewChat: isNewChat,
        },
      });

      await upsertChat({
        userId: session.user.id,
        chatId: chatId,
        title,
        messages,
      });

      upsertChatSpan.end({
        output: {
          success: true,
          chatId: chatId,
        },
      });

      // Send NEW_CHAT_CREATED event if this is a new chat
      if (isNewChat) {
        dataStream.writeData({
          type: "NEW_CHAT_CREATED",
          chatId: chatId,
        });
      }

      const result = streamFromDeepSearch({
        messages,
        telemetry: {
          isEnabled: true,
          functionId: "agent",
          metadata: {
            langfuseTraceId: trace.id,
          },
        },
        onFinish: async ({ response }) => {
          // Get the response messages generated by the AI
          const responseMessages = response.messages;
          
          // Merge the original messages with the AI's response messages
          const updatedMessages = appendResponseMessages({
            messages,
            responseMessages,
          });
          
          // Save the complete chat with all messages to the database
          const upsertChatFinalSpan = trace.span({
            name: "upsert-chat-final",
            input: {
              userId: session.user.id,
              chatId: chatId,
              title: title,
              messageCount: updatedMessages.length,
              hasAIResponse: true,
            },
          });

          await upsertChat({
            userId: session.user.id,
            chatId: chatId,
            title,
            messages: updatedMessages,
          });

          upsertChatFinalSpan.end({
            output: {
              success: true,
              chatId: chatId,
              totalMessages: updatedMessages.length,
            },
          });
          
          // Flush Langfuse trace
          await langfuse.flushAsync();
        },
      });

      result.mergeIntoDataStream(dataStream);
    },
    onError: (e) => {
      console.error(e);
      return "Oops, an error occured!";
    },
  });
}